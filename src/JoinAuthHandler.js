// src/JoinAuthHandler.js
class JoinAuthHandler {
    constructor(client, config) {
        this.client = client;
        this.config = config;
        this.setupHandler();
    }

    setupHandler() {
        // Handler para rea√ß√µes do dono em solicita√ß√µes
        this.client.on('message_reaction', async (reaction) => {
            try {
                // Verifica se √© uma rea√ß√£o do dono
                if (reaction.senderId !== this.config.NumeroDono + '@c.us') return;
                
                const message = reaction.message;
                
                // Verifica se √© uma mensagem de solicita√ß√£o de join
                if (!message.body.includes('SOLICITA√á√ÉO DE ENTRADA EM GRUPO')) return;
                
                await this.handleJoinReaction(reaction, message);
                
            } catch (error) {
                console.error('‚ùå Erro no handler de autoriza√ß√£o:', error);
            }
        });

        // Handler para mensagens do dono com comandos de autoriza√ß√£o
        this.client.on('message', async (message) => {
            try {
                // S√≥ processa mensagens do dono
                if (message.from !== this.config.NumeroDono + '@c.us') return;
                
                const content = message.body.toLowerCase();
                
                // Verifica comandos de autoriza√ß√£o
                if (content.startsWith('aceitar ') || content.startsWith('recusar ')) {
                    await this.handleAuthCommand(message);
                }
                
            } catch (error) {
                console.error('‚ùå Erro no handler de comando de auth:', error);
            }
        });
    }

    async handleJoinReaction(reaction, message) {
        const emoji = reaction.reaction;
        
        if (emoji === '‚úÖ') {
            await this.acceptJoinRequest(message);
        } else if (emoji === '‚ùå') {
            await this.rejectJoinRequest(message, 'Solicita√ß√£o rejeitada pelo dono');
        }
    }

    async handleAuthCommand(message) {
        const args = message.body.split(' ');
        const command = args[0].toLowerCase();
        
        if (command === 'aceitar') {
            await this.acceptJoinRequest(message);
        } else if (command === 'recusar') {
            const reason = args.slice(1).join(' ') || 'Solicita√ß√£o rejeitada pelo dono';
            await this.rejectJoinRequest(message, reason);
        }
    }

    async acceptJoinRequest(message) {
        try {
            // Extrai informa√ß√µes da mensagem de solicita√ß√£o
            const requestInfo = this.extractRequestInfo(message.body);
            if (!requestInfo) {
                await message.reply('‚ùå N√£o foi poss√≠vel processar a solicita√ß√£o.');
                return;
            }

            const loadingMsg = await message.reply('‚è≥ Processando autoriza√ß√£o...');

            // Tenta entrar no grupo
            try {
                const chatId = await this.client.acceptInvite(requestInfo.inviteCode);
                const newChat = await this.client.getChatById(chatId);
                
                // Sucesso - notifica o dono
                await loadingMsg.edit(`‚úÖ *AUTORIZA√á√ÉO ACEITA!* ‚úÖ\n\nüì± *Grupo:* ${newChat.name}\nüë§ *Solicitante:* ${requestInfo.userName}\nüìû *N√∫mero:* ${requestInfo.userNumber}\n‚è∞ *Data:* ${new Date().toLocaleString('pt-BR')}\n\nüéâ Bot entrou no grupo com sucesso!`);
                
                // Notifica o usu√°rio
                const userMessage = `‚úÖ *SOLICITA√á√ÉO ACEITA!* ‚úÖ\n\nüéâ *Boa not√≠cia:* Sua solicita√ß√£o foi aceita!\nüì± *Grupo:* ${newChat.name}\nüëë *Autorizado por:* ${this.config.NickDono}\n‚è∞ *Data:* ${new Date().toLocaleString('pt-BR')}\n\nü§ñ *${this.config.NomeDoBot}* agora est√° dispon√≠vel no grupo!\n\nüí° Use ${this.config.Prefixo}menu para ver os comandos.`;
                
                await this.client.sendMessage(requestInfo.userNumber + '@c.us', userMessage);
                
                console.log(`‚úÖ Autoriza√ß√£o aceita: ${requestInfo.userName} - Grupo: ${newChat.name}`);
                
            } catch (joinError) {
                console.error('‚ùå Erro ao entrar no grupo:', joinError);
                
                let errorMsg = '‚ùå Erro ao entrar no grupo: ';
                if (joinError.message.includes('invite link expired')) {
                    errorMsg += 'Link expirado';
                } else if (joinError.message.includes('already in group')) {
                    errorMsg += 'Bot j√° est√° no grupo';
                } else {
                    errorMsg += 'Link inv√°lido ou grupo inacess√≠vel';
                }
                
                await loadingMsg.edit(errorMsg);
                
                // Notifica o usu√°rio do erro
                await this.client.sendMessage(requestInfo.userNumber + '@c.us', 
                    `‚ùå *ERRO NA AUTORIZA√á√ÉO* ‚ùå\n\nüòî *Problema:* ${errorMsg}\nüëë *Dono:* ${this.config.NickDono}\n\nüí° *Solu√ß√£o:* Verifique se o link est√° correto e v√°lido, depois fa√ßa uma nova solicita√ß√£o.`);
            }

        } catch (error) {
            console.error('‚ùå Erro ao aceitar solicita√ß√£o:', error);
            await message.reply('‚ùå Erro interno ao processar autoriza√ß√£o.');
        }
    }

    async rejectJoinRequest(message, reason) {
        try {
            const requestInfo = this.extractRequestInfo(message.body);
            if (!requestInfo) {
                await message.reply('‚ùå N√£o foi poss√≠vel processar a rejei√ß√£o.');
                return;
            }

            // Notifica o dono
            await message.reply(`‚ùå *SOLICITA√á√ÉO REJEITADA* ‚ùå\n\nüë§ *Solicitante:* ${requestInfo.userName}\nüìû *N√∫mero:* ${requestInfo.userNumber}\nüí¨ *Motivo:* ${reason}\n‚è∞ *Data:* ${new Date().toLocaleString('pt-BR')}`);

            // Notifica o usu√°rio
            let userMessage = `‚ùå *SOLICITA√á√ÉO REJEITADA* ‚ùå\n\nüòî *Sua solicita√ß√£o foi rejeitada*\nüëë *Por:* ${this.config.NickDono}\n‚è∞ *Data:* ${new Date().toLocaleString('pt-BR')}`;
            
            if (reason && reason !== 'Solicita√ß√£o rejeitada pelo dono') {
                userMessage += `\n\nüí¨ *Motivo:* ${reason}`;
            }
            
            userMessage += `\n\nüí° *Voc√™ pode:*\n‚Ä¢ Tentar novamente mais tarde\n‚Ä¢ Entrar em contato com o dono: ${this.config.NumeroDono}`;

            await this.client.sendMessage(requestInfo.userNumber + '@c.us', userMessage);
            
            console.log(`‚ùå Solicita√ß√£o rejeitada: ${requestInfo.userName} - Motivo: ${reason}`);

        } catch (error) {
            console.error('‚ùå Erro ao rejeitar solicita√ß√£o:', error);
            await message.reply('‚ùå Erro interno ao processar rejei√ß√£o.');
        }
    }

    extractRequestInfo(messageBody) {
        try {
            // Extrai informa√ß√µes usando regex
            const userNameMatch = messageBody.match(/\*Solicitante:\* (.+)/);
            const userNumberMatch = messageBody.match(/\*N√∫mero:\* (\d+)/);
            const linkMatch = messageBody.match(/\*Link:\* (https:\/\/chat\.whatsapp\.com\/[A-Za-z0-9]+)/);
            
            if (!userNameMatch || !userNumberMatch || !linkMatch) {
                return null;
            }
            
            const inviteCodeMatch = linkMatch[1].match(/https:\/\/chat\.whatsapp\.com\/([A-Za-z0-9]+)/);
            
            return {
                userName: userNameMatch[1],
                userNumber: userNumberMatch[1],
                groupLink: linkMatch[1],
                inviteCode: inviteCodeMatch ? inviteCodeMatch[1] : null
            };
            
        } catch (error) {
            console.error('‚ùå Erro ao extrair informa√ß√µes:', error);
            return null;
        }
    }
}

module.exports = JoinAuthHandler;
