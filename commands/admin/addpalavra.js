// commands/admin/addpalavra.js
const fs = require('fs');
const path = require('path');

module.exports = {
    name: 'addpalavra',
    description: 'Adiciona uma palavra √† lista de palavras proibidas (admin)',
    usage: 'addpalavra <palavra proibida>',
    execute: async ({ message, args, config, chat }) => {
        // Verifica se √© grupo
        if (!chat.isGroup) {
            return await message.reply('‚ùå Este comando s√≥ pode ser usado em grupos!');
        }

        // Verifica se foi fornecida uma palavra
        if (args.length === 0) {
            const totalPalavras = config.PalavrasProibidas ? config.PalavrasProibidas.length : 0;
            return await message.reply(`‚ùå *Uso incorreto!*\n\nüìñ *Como usar:* ${config.Prefixo}addpalavra <palavra>\n\nüí° *Exemplo:* ${config.Prefixo}addpalavra idiota\n\nüìä *Palavras cadastradas:* ${totalPalavras}\nüîç *Ver lista:* ${config.Prefixo}listpalavra`);
        }

        const palavra = args.join(' ').toLowerCase().trim();

        // Valida√ß√µes
        if (palavra.length < 2) {
            return await message.reply('‚ùå A palavra deve ter pelo menos 2 caracteres!');
        }

        if (palavra.length > 50) {
            return await message.reply('‚ùå A palavra deve ter no m√°ximo 50 caracteres!');
        }

        try {
            // Caminho do arquivo de configura√ß√£o
            const configPath = path.join(__dirname, '..', '..', 'dono', 'dono.json');
            
            // L√™ o arquivo atual
            const configData = JSON.parse(fs.readFileSync(configPath, 'utf8'));
            
            // Inicializa PalavrasProibidas se n√£o existir
            if (!configData.PalavrasProibidas) {
                configData.PalavrasProibidas = [];
            }

            // Verifica se a palavra j√° existe
            if (configData.PalavrasProibidas.includes(palavra)) {
                return await message.reply(`‚ö†Ô∏è A palavra "${palavra}" j√° est√° na lista de palavras proibidas!`);
            }

            // Adiciona a palavra
            configData.PalavrasProibidas.push(palavra);
            
            // Salva no arquivo
            fs.writeFileSync(configPath, JSON.stringify(configData, null, 2), 'utf8');
            
            // Atualiza tamb√©m na mem√≥ria
            if (!config.PalavrasProibidas) config.PalavrasProibidas = [];
            config.PalavrasProibidas.push(palavra);
            
            // Pega informa√ß√µes de quem executou
            const author = await message.getContact();
            const authorName = author.pushname || author.name || 'Admin';
            
            // Mensagem de sucesso
            const response = `‚úÖ *PALAVRA ADICIONADA COM SUCESSO!* ‚úÖ\n\nü§¨ *Palavra proibida:* ${palavra}\nüìä *Total na lista:* ${config.PalavrasProibidas.length}\nüì± *Grupo:* ${chat.name}\n\n‚ö†Ô∏è *Efeito:* Usu√°rios que usarem esta palavra ser√£o removidos automaticamente (se anti-palavr√£o estiver ativo)\n\nüëë *Exce√ß√µes:*\n‚Ä¢ Dono do bot\n‚Ä¢ Administradores do grupo\n‚Ä¢ Usu√°rios VIP\n\nüõ°Ô∏è *Adicionada por:* ${authorName}\n‚è∞ *Data:* ${new Date().toLocaleString('pt-BR')}\n\nüí° *Status do anti-palavr√£o:* ${config.AntiSystems?.antipalavrao ? 'Ativado ‚úÖ' : 'Desativado ‚ùå'}`;
            
            await message.reply(response);
            
            console.log(`ü§¨ Palavra "${palavra}" adicionada por ${authorName} no grupo: ${chat.name}`);

        } catch (error) {
            console.error('‚ùå Erro ao adicionar palavra proibida:', error);
            await message.reply('‚ùå Erro interno ao adicionar palavra! Verifique os logs.');
        }
    }
};
