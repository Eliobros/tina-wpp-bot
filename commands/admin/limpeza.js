// commands/admin/limpeza.js
module.exports = {
    name: 'limpeza',
    description: 'Remove usu√°rios inativos dos √∫ltimos 7 dias do grupo (admin)',
    usage: 'limpeza [dias] (padr√£o: 7 dias)',
    execute: async ({ message, args, config, chat, client }) => {
        if (!chat.isGroup) {
            return await message.reply('‚ùå Este comando s√≥ pode ser usado em grupos!');
        }

        try {
            const daysInactive = args[0] ? parseInt(args[0]) : 7;
            
            if (isNaN(daysInactive) || daysInactive < 1 || daysInactive > 30) {
                return await message.reply(`‚ùå N√∫mero de dias inv√°lido!\n\nüí° Use entre 1 e 30 dias\nüìñ Exemplo: ${config.Prefixo}limpeza 7`);
            }

            await message.react('üßπ');
            
            const loadingMsg = await message.reply(`üßπ Iniciando limpeza de usu√°rios inativos (${daysInactive} dias)...`);

            const StatsHandler = require('../../src/StatsHandler');
            const statsHandler = new StatsHandler(config);
            
            const inactiveUsers = statsHandler.getInactiveUsers(chat.id._serialized, daysInactive);
            
            if (inactiveUsers.length === 0) {
                await loadingMsg.edit(`üßπ Nenhum usu√°rio inativo encontrado!\n\nTodos os membros estiveram ativos nos √∫ltimos ${daysInactive} dias.`);
                return;
            }

            // Filtra apenas membros comuns (n√£o remove admins)
            const participantsToRemove = [];
            const adminsSkipped = [];
            
            for (const inactiveUser of inactiveUsers) {
                try {
                    const participant = chat.participants.find(p => 
                        p.id._serialized.includes(inactiveUser.userNumber)
                    );
                    
                    if (participant) {
                        if (participant.isAdmin) {
                            adminsSkipped.push(inactiveUser);
                        } else {
                            participantsToRemove.push({
                                id: participant.id._serialized,
                                userNumber: inactiveUser.userNumber,
                                userName: inactiveUser.userName
                            });
                        }
                    }
                } catch (error) {
                    console.error(`Erro ao verificar usu√°rio ${inactiveUser.userNumber}:`, error);
                }
            }

            if (participantsToRemove.length === 0) {
                await loadingMsg.edit(`üßπ *LIMPEZA CONCLU√çDA* üßπ\n\n‚ö†Ô∏è Nenhum usu√°rio foi removido!\n\nüí° *Motivos poss√≠veis:*\n‚Ä¢ Todos os inativos s√£o administradores\n‚Ä¢ Usu√°rios j√° sa√≠ram do grupo\n‚Ä¢ Apenas membros ativos no per√≠odo`);
                return;
            }

            // Pergunta confirma√ß√£o
            await loadingMsg.edit(`‚ö†Ô∏è *CONFIRMA√á√ÉO DE LIMPEZA* ‚ö†Ô∏è\n\nüßπ *Usu√°rios inativos encontrados:* ${inactiveUsers.length}\nüë• *Ser√£o removidos:* ${participantsToRemove.length}\nüõ°Ô∏è *Admins preservados:* ${adminsSkipped.length}\nüìÖ *Per√≠odo de inatividade:* ${daysInactive} dias\n\nüí° *Responda com "CONFIRMAR" para prosseguir*\n‚è∞ *Tempo limite: 30 segundos*`);

            // Aguarda confirma√ß√£o
            const filter = (msg) => {
                return msg.from === message.from && 
                       msg.body.toUpperCase() === 'CONFIRMAR';
            };

            const confirmationPromise = new Promise((resolve) => {
                const timeout = setTimeout(() => resolve(null), 30000);
                
                const messageHandler = (msg) => {
                    if (filter(msg)) {
                        clearTimeout(timeout);
                        client.removeListener('message', messageHandler);
                        resolve(msg);
                    }
                };
                
                client.on('message', messageHandler);
            });

            const confirmation = await confirmationPromise;

            if (!confirmation) {
                await loadingMsg.edit('‚ùå Limpeza cancelada por timeout (30 segundos)');
                return;
            }

            // Executa a limpeza
            await loadingMsg.edit('üßπ Executando limpeza... Por favor, aguarde.');
            
            let removedCount = 0;
            let errorCount = 0;
            const removedUsers = [];

            for (const user of participantsToRemove) {
                try {
                    await chat.removeParticipants([user.id]);
                    removedUsers.push(user);
                    removedCount++;
                    
                    // Pequena pausa entre remo√ß√µes
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    
                } catch (error) {
                    console.error(`Erro ao remover ${user.userName}:`, error);
                    errorCount++;
                }
            }

            // Remove stats dos usu√°rios removidos
            const removedNumbers = removedUsers.map(u => u.userNumber);
            statsHandler.removeUserStats(removedNumbers, chat.id._serialized);

            // Pega informa√ß√µes de quem executou
            const author = await message.getContact();
            const authorName = author.pushname || author.name || 'Admin';

            // Relat√≥rio final
            let finalReport = `‚úÖ *LIMPEZA CONCLU√çDA* ‚úÖ\n\nüìä *Resultados:*\n`;
            finalReport += `‚úÖ Removidos: ${removedCount} usu√°rios\n`;
            finalReport += `‚ùå Erros: ${errorCount} usu√°rios\n
