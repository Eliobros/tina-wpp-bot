// commands/dono/addvip.js
const fs = require('fs');
const path = require('path');

module.exports = {
    name: 'addvip',
    description: 'Adiciona um usu√°rio √† lista VIP (apenas dono)',
    usage: 'addvip @usuario ou addvip <n√∫mero> ou responder mensagem',
    execute: async ({ message, args, client, config }) => {
        let userToAdd = null;
        let userName = '';

        try {
            // Garante que config.Vips exista e seja array
            if (!Array.isArray(config.Vips)) {
                config.Vips = [];
            }

            // Verifica se √© uma resposta a uma mensagem
            if (message.hasQuotedMsg) {
                const quotedMessage = await message.getQuotedMessage();
                userToAdd = quotedMessage.from.replace('@c.us', '');
                const contact = await client.getContactById(quotedMessage.from);
                userName = contact.pushname || contact.name || userToAdd;
            } 
            // Verifica se foi mencionado algu√©m
            else if (message.mentionedIds && message.mentionedIds.length > 0) {
                userToAdd = message.mentionedIds[0].replace('@c.us', '');
                const contact = await client.getContactById(message.mentionedIds[0]);
                userName = contact.pushname || contact.name || userToAdd;
            }
            // Verifica se foi passado um n√∫mero como argumento
            else if (args.length > 0) {
                const number = args.join(' ').replace(/[^0-9]/g, '');
                if (number.length > 0) {
                    userToAdd = number;
                    try {
                        const contact = await client.getContactById(number + '@c.us');
                        userName = contact.pushname || contact.name || number;
                    } catch {
                        userName = number;
                    }
                }
            }

            // Se n√£o encontrou usu√°rio para adicionar
            if (!userToAdd) {
                return await message.reply(`‚ùå *Uso incorreto!*\n\nüìñ *Formas de usar:*\n‚Ä¢ ${config.Prefixo}addvip @usuario\n‚Ä¢ ${config.Prefixo}addvip 5511999999999\n‚Ä¢ Responder mensagem + ${config.Prefixo}addvip\n\nüí° *Exemplo:* ${config.Prefixo}addvip @5511999999999`);
            }

            // Verifica se n√£o est√° tentando adicionar o pr√≥prio dono
            if (userToAdd === config.NumeroDono) {
                return await message.reply(`‚ö†Ô∏è O dono ${config.NickDono} j√° tem todas as permiss√µes! N√£o precisa ser VIP.`);
            }

            // Verifica se j√° √© VIP
            if (config.Vips.includes(userToAdd)) {
                return await message.reply(`‚ö†Ô∏è ${userName} j√° est√° na lista VIP!`);
            }

            // Caminho do arquivo de configura√ß√£o
            const configPath = path.join(__dirname, '..', '..', 'dono', 'dono.json');
            
            // L√™ o arquivo atual
            const configData = JSON.parse(fs.readFileSync(configPath, 'utf8'));
            
            // Garante que tamb√©m existe no JSON
            if (!Array.isArray(configData.Vips)) {
                configData.Vips = [];
            }

            // Adiciona o VIP
            configData.Vips.push(userToAdd);
            
            // Salva no arquivo
            fs.writeFileSync(configPath, JSON.stringify(configData, null, 2), 'utf8');
            
            // Atualiza tamb√©m na mem√≥ria
            config.Vips.push(userToAdd);
            
            // Mensagem de sucesso
            const successMessage = `‚úÖ *VIP adicionado com sucesso!*\n\n‚≠ê *Novo VIP:* ${userName}\nüì± *N√∫mero:* ${userToAdd}\nüëë *Adicionado por:* ${config.NickDono}\n‚è∞ *Data:* ${new Date().toLocaleString('pt-BR')}\n\nüéâ Parab√©ns pela promo√ß√£o a VIP!`;
            
            await message.reply(successMessage);
            
            console.log(`‚≠ê VIP adicionado: ${userName} (${userToAdd}) pelo dono`);

        } catch (error) {
            console.error('‚ùå Erro ao adicionar VIP:', error);
            await message.reply('‚ùå Erro interno ao adicionar VIP! Verifique os logs.');
        }
    }
};
