// commands/dono/antipv.js
const fs = require('fs');
const path = require('path');

module.exports = {
    name: 'antipv',
    description: 'Ativa/desativa o sistema anti-privado (bloqueia usu√°rios que mandam mensagens no PV) (apenas dono)',
    usage: 'antipv 1 (ativar) ou antipv 0 (desativar)',
    execute: async ({ message, args, config }) => {
        // Verifica se foi fornecido argumento
        if (args.length === 0 || (args[0] !== '1' && args[0] !== '0')) {
            const currentStatus = config.AntiSystems?.antipv ? 'Ativado ‚úÖ' : 'Desativado ‚ùå';
            return await message.reply(`‚ùå *Uso incorreto!*\n\nüìñ *Como usar:*\n‚Ä¢ ${config.Prefixo}antipv 1 *(ativar)*\n‚Ä¢ ${config.Prefixo}antipv 0 *(desativar)*\n\nüí° *Status atual:* ${currentStatus}\n\nüì± *Fun√ß√£o:* Bloqueia automaticamente usu√°rios que enviarem mensagens no privado\n\n‚ö†Ô∏è *Exce√ß√£o:* O dono nunca ser√° bloqueado`);
        }

        const novoStatus = args[0] === '1';

        try {
            // Verifica se j√° est√° no status desejado
            if (config.AntiSystems?.antipv === novoStatus) {
                const statusText = novoStatus ? 'ativado' : 'desativado';
                return await message.reply(`‚ö†Ô∏è O anti-PV j√° est√° ${statusText}!`);
            }

            // Caminho do arquivo de configura√ß√£o
            const configPath = path.join(__dirname, '..', '..', 'dono', 'dono.json');
            
            // L√™ o arquivo atual
            const configData = JSON.parse(fs.readFileSync(configPath, 'utf8'));
            
            // Inicializa AntiSystems se n√£o existir
            if (!configData.AntiSystems) {
                configData.AntiSystems = {
                    antilink: false,
                    antifake: false,
                    antipalavrao: false,
                    antipv: false,
                    anticall: false
                };
            }

            // Atualiza a configura√ß√£o
            configData.AntiSystems.antipv = novoStatus;
            
            // Salva no arquivo
            fs.writeFileSync(configPath, JSON.stringify(configData, null, 2), 'utf8');
            
            // Atualiza tamb√©m na mem√≥ria
            if (!config.AntiSystems) config.AntiSystems = {};
            config.AntiSystems.antipv = novoStatus;
            
            // Mensagem de sucesso
            const statusText = novoStatus ? 'ativado ‚úÖ' : 'desativado ‚ùå';
            const emoji = novoStatus ? 'üì±' : 'üí¨';
            
            const response = `${emoji} *ANTI-PV ${statusText.toUpperCase()}* ${emoji}\n\nüõ°Ô∏è *Sistema:* ${statusText}\nüëë *Configurado por:* ${config.NickDono} (Dono)\n\n${novoStatus ? '‚ö†Ô∏è *Fun√ß√£o ativa:*\n‚Ä¢ Usu√°rios que enviarem mensagens no privado ser√£o bloqueados automaticamente\n‚Ä¢ Mensagem de aviso ser√° enviada antes do bloqueio\n‚Ä¢ Prote√ß√£o contra spam no privado\n\nüëë *Exce√ß√£o:*\n‚Ä¢ O dono nunca ser√° bloqueado\n\nü§ñ *Resultado:* Privacidade protegida!' : 'üí¨ *Resultado:* Usu√°rios podem enviar mensagens no privado livremente'}\n\n‚è∞ *Data:* ${new Date().toLocaleString('pt-BR')}`;
            
            await message.reply(response);
            
            console.log(`${emoji} Anti-PV ${statusText} pelo dono`);

        } catch (error) {
            console.error('‚ùå Erro ao alterar configura√ß√£o anti-PV:', error);
            await message.reply('‚ùå Erro interno ao alterar configura√ß√£o! Verifique os logs.');
        }
    }
};
